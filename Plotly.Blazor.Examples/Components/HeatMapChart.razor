@using System.Globalization
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Font = Plotly.Blazor.LayoutLib.AnnotationLib.Font

<PlotlyChart style="height: 60vh; min-height: 350px" Layout="layout" Config="config" Data="data" Id="HeatMapChart" @ref="plotlyChart" />

@code {

    PlotlyChart plotlyChart;
    Layout layout;
    Config config;
    IList<ITrace> data;


    /// <inheritdoc />
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        layout = new Layout
        {
            Title = new Title
            {
                Text = "Annotated Heatmap"
            },
            Annotations = new List<Annotation>(),
            XAxis = new List<XAxis>
            {
                new ()
                {
                    Ticks = TicksEnum.Empty,
                    Side = SideEnum.Top
                }
            },
            YAxis = new List<YAxis>
            {
                new ()
                {
                    Ticks = LayoutLib.YAxisLib.TicksEnum.Empty,
                    TickSuffix = " ",
                }
            }
        };

        config = new Config
        {
            ShowLink = false,
            Responsive = true,
            DisplayLogo = false
        };
        data = GetMapData();

        AddAnnotations(layout, data.First());
    }

    IList<ITrace> GetMapData()
    {
        IList<ITrace> mapData = new List<ITrace>();

        var xValues = new[] { 'A', 'B', 'C', 'D', 'E' };

        var yValues = new[] { 'W', 'X', 'Y', 'Z' };

        var zValues = new[]
        {
            new double? []{0.00, 0.00, 0.75, 0.75, 0.00},
            new double? []{0.00, 0.00, 0.75, 0.75, 0.00},
            new double? []{0.75, 0.75, 0.75, 0.75, 0.75},
            new double? []{null, 0.00, 0.00, 0.75, 0.00}
        };

        mapData.Add(new HeatMap()
        {
            X = xValues.Cast<object>().ToList(),
            Y = yValues.Cast<object>().ToList(),
            Z = zValues.Cast<object>().ToList(),
            ColorScale = new[]
            {
                new [] {"0", "#3D9970"},
                new [] {"1", "#001f3f"},
            },
            ShowScale = false
        });

        return mapData;
    }

    static void AddAnnotations(Layout layout, ITrace trace)
    {
        if (trace is not HeatMap { Z: List<object> zValues } heatMap) return;

        for (var i = 0; i < heatMap.Y.Count; i++)
        {
            for (var j = 0; j < heatMap.X.Count; j++)
            {
                var currentValue = ((double?[])zValues[i])[j];
                var textColor = currentValue != 0.0 ? "white" : "black";

                var result = new Annotation
                {
                    XRef = "x1",
                    YRef = "y1",
                    X = heatMap.X[j],
                    Y = heatMap.Y[i],
                    Text = currentValue.HasValue ? currentValue.Value.ToString(CultureInfo.InvariantCulture) : string.Empty,
                    Font = new Font
                    {
                        Family = "Arial",
                        Size = 12,
                        Color = textColor
                    },
                    ShowArrow = false,
                };
                layout.Annotations.Add(result);
            }
        }
    }
}